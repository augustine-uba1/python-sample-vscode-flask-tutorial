# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

strategy:
  matrix:
    Python310:
      python.version: '3.10'
    Python311:
      python.version: '3.11'
    Python312:
      python.version: '3.12'

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
    displayName: 'Install dependencies'

  - task: ArchiveFiles@2
    displayName: 'Archive files'
    inputs:
      rootFolderOrFile: $(System.DefaultWorkingDirectory)
      includeRootFolder: false
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-$(python.version).zip
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

  - script: |
      pip install pytest pytest-azurepipelines
      pytest
    displayName: 'pytest'

# # When manually running the pipeline, you can select whether it
# # succeeds or fails.
# parameters:
# - name: succeed
#   displayName: Succeed or fail
#   type: boolean
#   default: false

# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# variables:
#   system_accesstoken: $(System.AccessToken)

# jobs:
# - job: Work
#   steps:
#   - script: echo Hello, world!
#     displayName: 'Run a one-line script'

#   # This malformed command causes the job to fail
#   # Only run this command if the succeed variable is set to false
#   - script: git clone malformed input
#     condition: eq(${{ parameters.succeed }}, false)

# # This job creates a work item, and only runs if the previous job failed
# - job: ErrorHandler
#   dependsOn: Work
#   condition: failed()
#   steps: 
#   - bash: |
#       az boards work-item create \
#         --title "Build $(build.buildNumber) failed" \
#         --type task \
#         --org https://dev.azure.com/augustineubanzemeka0832 \
#         --project "Data Engineering Environment"
#     env: 
#       AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
#     displayName: 'Create work item on failure'

# https://learn.microsoft.com/en-us/azure/devops/pipelines/customize-pipeline?view=azure-devopshttps://learn.microsoft.com/en-us/azure/devops/pipelines/customize-pipeline?view=azure-devops